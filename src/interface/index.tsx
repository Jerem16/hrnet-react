import { ChangeEvent } from "react";

/**
 * Interface FormData
 * Repr√©sente les donn√©es d'un formulaire utilisateur.
 */
export interface FormData {
    firstName: string; // Pr√©nom de l'utilisateur
    lastName: string; // Nom de famille
    dateOfBirth: string; // Date de naissance
    startDate: string; // Date de d√©but (ex: embauche, adh√©sion)
    street: string; // Adresse (rue)
    city: string; // Ville
    state: string; // √âtat / R√©gion
    zipCode: string; // Code postal
    department: string; // D√©partement (peut √™tre li√© √† un service ou une r√©gion)
}

/**
 * Interface InputFieldProps
 * D√©crit les props attendues pour un champ de saisie (input).
 */
export interface InputFieldProps {
    label: string; // Libell√© affich√© au-dessus du champ
    id: string; // Identifiant unique du champ (associ√© au label)
    error?: string; // Message d'erreur facultatif
    type?: string; // Type d'input (text, number, etc.), par d√©faut "text"
    value: string; // Valeur actuelle du champ
    minLength?: number; // Longueur minimale requise (si applicable)
    disabled?: boolean; // Indique si le champ est d√©sactiv√©
    onChange: (e: ChangeEvent<HTMLInputElement>) => void; // Fonction de gestion des changements
}

/**
 * Interface SelectOption
 * D√©crit une option dans un champ de s√©lection (select).
 */
export interface SelectOption {
    seize?: number; // Taille de l'option (non standard, √† v√©rifier)
    name?: string; // Libell√© affich√© dans la liste d√©roulante
    value: string | number; // Valeur stock√©e lors de la s√©lection
    abbreviation?: string; // Abr√©viation √©ventuelle de l'option
}

/**
 * Interface SelectFieldProps
 * D√©crit les props attendues pour un champ de s√©lection (select).
 */
export interface SelectFieldProps {
    label: string; // Libell√© affich√© au-dessus du select
    id: string; // Identifiant unique du champ
    type?: string; // Type du select (non toujours utile)
    options: SelectOption[]; // üî• Tableau des options disponibles
    value: string; // Valeur actuellement s√©lectionn√©e
    placeholder?: string; // Texte par d√©faut avant s√©lection
    onChange: (e: ChangeEvent<HTMLSelectElement>) => void; // Fonction de gestion des changements
}
